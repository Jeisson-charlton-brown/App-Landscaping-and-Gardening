// This is the list of libraries that will be used in the code for different functions that will be had

using System;
using System.Collections.Generic; // Library for using lists and dictionaries
using System.ComponentModel; // Handles property attributes and events
using System.Data; // Handles databases and data sets
using System.Drawing; // For working with graphics and colors
using System.IO; // Provides functions for manipulating files and streams
using System.Linq; // Provides LINQ functionality
using System.Net.Sockets; // Provides classes for network communication using sockets
using System.Runtime.Serialization.Formatters.Binary; // Serializes and deserializes binary objects
using System.Text; // Provides functions for handling character strings
using System.Text.RegularExpressions; // Allows working with regular expressions
using System.Threading; // Provides classes for working with threads
using System.Threading.Tasks; // Provides functionality for asynchronous programming
using System.Windows.Forms; // Library to create graphical interfaces (Windows Forms)
using System.Xml.Serialization; // For serialization of objects in XML

namespace Client // Define the project namespace
{
    public partial class formMain : Form
    {
        // Main variables of the class
        public TcpClient clientSocket; // TCP client connecting to the server
        public NetworkStream serverStream = default(NetworkStream); // Data flow between client and server
        string readData = null; // Stores the last received message
        Thread ctThread; // Thread to handle message reception
        String name = null; // Username
        List<string> nowChatting = new List<string>(); // List of users with whom you have a private chat
        List<string> chat = new List<string>(); // Stores chat messages to send

        public void setName(String title) // Sets the window title and user name
        {
            this.Text = title;
            name = title;
        }

        public formMain()
        {
            InitializeComponent(); // Constructor that initializes the interface components
        }

        private void btnSend_Click(object sender, EventArgs e)
        {
            try
            {
                if (!input.Text.Equals("")) // Check if the text input field is not empty
                {
                    chat.Add("gChat"); // Add the message type (global chat)
                    chat.Add(input.Text); // Add the text message to the chat
                    byte[] outStream = ObjectToByteArray(chat); // Convert the list of messages to a byte array
                    serverStream.Write(outStream, 0, outStream.Length); // Send the byte array to the server via the stream
                    serverStream.Flush(); // Clear the write buffer
                    input.Text = ""; // Clear the text input field
                    chat.Clear(); // Clear the message list
                }
            }
            catch (Exception er)
            {
                btnConnect.Enabled = true; // Enables the connect button if there is an error sending the message
            }
        }

        private void btnConnect_Click(object sender, EventArgs e)
        {
            clientSocket = new TcpClient(); // Initialize a new TCP client
            try
            {
                clientSocket.Connect("127.0.0.1", 5000); // Attempt to connect to the server at the specified IP and port
                readData = "Connected to Server "; // Connection success message
                msg(); // Display the message on the interface

                serverStream = clientSocket.GetStream(); // Get the data stream from the server

                // Send the user's name to the server, terminated with a '$'
                byte[] outStream = Encoding.ASCII.GetBytes(name + "$");
                serverStream.Write(outStream, 0, outStream.Length);
                serverStream.Flush();
                btnConnect.Enabled = false; // Disable the connect button

                // Start a thread to receive messages from the server
                ctThread = new Thread(getMessage);
                ctThread.Start();
            }
            catch (Exception)
            {
                MessageBox.Show("Server Not Started"); // Display a message if the connection fails
            }
        }

        public void getUsers(List<string> parts)
        {
            // Update the list of users in the interface safely from another thread
            this.Invoke((MethodInvoker)delegate
            {
                listBox1.Items.Clear(); // Clear the list of connected users
                for (int i = 1; i < parts.Count; i++)
                {
                    listBox1.Items.Add(parts[i]); // Add each user to the list
                }
            });
        }

        private void getMessage()
        {
            try
            {
                while (true) // Loop to continuously receive messages
                {
                    serverStream = clientSocket.GetStream(); // Get the stream from the server
                    byte[] inStream = new byte[10025]; // Byte array to store the received data
                    serverStream.Read(inStream, 0, inStream.Length); // Read the data from the stream
                    List<string> parts = null; // To store deserialized received data

                    if (!SocketConnected(clientSocket)) // Check if the client is still connected
                    {
                        MessageBox.Show("You've been Disconnected"); // Display a message if the connection was lost
                        ctThread.Abort(); // Stop the message receiving thread
                        clientSocket.Close(); // Close the client connection
                        btnConnect.Enabled = true; // Enable the connect button
                    }

                    parts = (List<string>)ByteArrayToObject(inStream); // Convert byte array to list
                    switch (parts[0]) // Process received messages based on type
                    {
                        case "userList": // Update the list of connected users
                            getUsers(parts);
                            break;

                        case "gChat": // Store the global chat message
                            readData = "" + parts[1];
                            msg(); // Display the message on the interface
                            break;

                        case "pChat": // Handle a private chat message
                            managePrivateChat(parts);
                            break;
                    }

                    if (readData[0].Equals('\0')) // Check if the first character of the message is null
                    {
                        readData = "Reconnect Again"; // Reconnection message
                        msg(); // Display the message on the interface

                        this.Invoke((MethodInvoker)delegate // To write the received data
                        {
                            btnConnect.Enabled = true; // Enable the connect button
                        });

                        ctThread.Abort(); // Stop the receiving thread
                        clientSocket.Close(); // Close the client
                        break;
                    }
                    chat.Clear(); // Clear the message list
                }
            }
            catch (Exception e)
            {
                ctThread.Abort(); // Stop the message receiving thread in case of error
                clientSocket.Close(); // Close the client
                btnConnect.Enabled = true; // Enable the connect button
                Console.WriteLine(e); // Print the error to the console
            }
        }

        private void msg()
        {
            // Display the received message in the interface text area
            // If called from another thread, use Invoke to do so safely
            if (this.InvokeRequired)
                this.Invoke(new MethodInvoker(msg));
            else
                history.Text = history.Text + Environment.NewLine + " >> " + readData;
        }

        private void formMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Displays a dialog box to confirm the exit of the application
            DialogResult dialog = MessageBox.Show("Do you want to exit? ", "Exit", MessageBoxButtons.YesNo);
            if (dialog == DialogResult.Yes)
            {
                try
                {
                    ctThread.Abort(); // Stop the message receiving thread
                    clientSocket.Close(); // Close the TCP client
                }
                catch (Exception) { }

                Application.ExitThread(); // End all application threads
            }
            else if (dialog == DialogResult.No)
            {
                e.Cancel = true; // Cancel the window close event
            }
        }

        public void managePrivateChat(List<string> parts)
        {
            // Handle private chat messages and show the private chat window
            this.Invoke((MethodInvoker)delegate // To write the received data
            {
                if (parts[3].Equals("new")) // If the message indicates that it is a new private chat
                {
                    formPrivate privateC = new formPrivate(parts[2], clientSocket, name); // Create a new private chat window
                    nowChatting.Add(parts[2]); // Add the user to the private chat list
                    privateC.Text = "Private Chat with " + parts[2]; // Change the title of the window
                    privateC.Show(); // Show the private chat window
                }
                else
                {
                    // If a private chat window already exists, update the history
                    if (Application.OpenForms["formPrivate"] != null)
                    {
                        (Application.OpenForms["formPrivate"] as formPrivate).setHistory(parts[3]);
                    }
                }
            });
        }

        public byte[] ObjectToByteArray(object _Object)
        {
            using (var stream = new MemoryStream())
            {
                var formatter = new BinaryFormatter();
                formatter.Serialize(stream, _Object);
                return stream.ToArray(); // Convert the object to a byte array
            }
        }

        public Object ByteArrayToObject(byte[] arrBytes)
        {
            using (var memStream = new MemoryStream())
            {
                // Converts a byte array to an object using binary deserialization
                var binForm = new BinaryFormatter();
                memStream.Write(arrBytes, 0, arrBytes.Length);
                memStream.Seek(0, SeekOrigin.Begin);
                var obj = binForm.Deserialize(memStream);
                return obj;
            }
        }

        bool SocketConnected(TcpClient s) // Check whether client is connected to server
        {
            bool flag = false;
            try
            {
                bool part1 = s.Client.Poll(10, SelectMode.SelectRead); // Check if data is available
                bool part2 = (s.Available == 0); // Check if the number of bytes available is zero
                if (part1 && part2)
                {
                    indicator.BackColor = Color.Red; // Change the indicator color to red if the connection has been lost
                    this.Invoke((MethodInvoker)delegate // Cross threads
                    {
                        btnConnect.Enabled = true; // Enable the connect button
                    });
                    flag = false;
                }
                else
                {
                    indicator.BackColor = Color.Green; // Change the indicator color to green if the connection is still active
                    flag = true;
                }
            }
            catch (Exception er)
            {
                Console.WriteLine(er); // Print any errors to the console
            }
            return flag; // Return the connection status
        }

        private void privateChatToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listBox1.SelectedIndex != -1)
            {
                String clientName = listBox1.GetItemText(listBox1.SelectedItem);
                chat.Clear();
                chat.Add("pChat"); // Add private chat identifier
                chat.Add(clientName); // Add selected client's name
                chat.Add(name); // Add current user's name
                chat.Add("new"); // Indicate a new private chat request

                byte[] outStream = ObjectToByteArray(chat);
                serverStream.Write(outStream, 0, outStream.Length); // Send request for private chat
                serverStream.Flush();

                formPrivate privateChat = new formPrivate(clientName, clientSocket, name); // Create private chat window
                nowChatting.Add(clientName); // Add the user to the list of active private chats
                privateChat.Text = "Private Chat with " + clientName; // Set window title
                privateChat.Show();
                chat.Clear(); // Clear the message list
            }
        }

        private void btnClr_Click(object sender, EventArgs e)
        {
            history.Clear(); // Clear the chat history text area
        }

        private void history_TextChanged(object sender, EventArgs e)
        {
            history.SelectionStart = history.TextLength; // Move the caret to the end of the text
            history.ScrollToCaret(); // Scroll the text area to show the new message
        }
    }
}
